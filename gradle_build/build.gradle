plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.xuebinduan.gradle_build"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        buildConfigField("String","BaseURL",'"https://api.github.com"')

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "piad"
    productFlavors{
        free{
            dimension "piad"
            applicationId "com.xuebinduan.gradle_build"
        }
        paid{
            dimension "piad"
            applicationId "com.xuebinduan.gradle_build.plus"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    splits{
        density{
            enable true
            exclude "ldpi","xxhdpi","xxxhdpi"
        }
    }

    buildFeatures{
        dataBinding true
    }
}

gradle.taskGraph.whenReady{
    it.allTasks.each{task->
        println "${task.name} : ${task.class.name - '_Decorated'}"
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    compileOnly 'com.android.tools.build:gradle:3.0.1'
}

//====================plugin练习====================
//插件的意义在于复用
class MyAwesomePlugin implements Plugin<Project>{
    @Override
    void apply(Project project) {
        10.times{i ->
            //todo 这里task前面需要加project.
            project.task('task'+i){
                if (i%2==0){
                    dependsOn('first')
                }
                def capturedI = i
                doLast {
                    println("Executing task ${capturedI}")
                }
            }
        }
    }
}
//本质上就等于实例了这个插件类调用了这个类里面的那个apply方法，执行完了之后，这个方法就返回了
apply([plugin:MyAwesomePlugin])
//-----------2------------------
class HenCoderPlugin implements Plugin<Project>{
    @Override
    void apply(Project project) {
        def extension = project.extensions.create("hencoder",HenCoderExtension)
        project.afterEvaluate {
            println "Hello ${extension.name}!"
        }
    }
}
class HenCoderExtension{
    def name = 'duanxuebin'
}
apply plugin: HenCoderPlugin
hencoder{
    name 'negier' //name('negier'),即setName('negier')
}
//-----------3------------------
//todo 看buildSrc项目
//todo 记得在文件头部声明package com.xxx.xxx
apply plugin: 'com.xuebinduan.testplugin'
hencoder2{
    name 'buildSrc negier' //name('negier'),即setName('negier')
}

//====================gradle练习====================
/*
 * 生命周期：
 * Initialization,初始化阶段，一般不会接触到
 * Configuration,配置阶段，本质上就是将build.gradle从头执行到尾
 * Execution,执行阶段
 */
task("helloworld"){
    println 'configure'
    doLast {
        println("Executing task")
    }
}
//钩子函数，在evaluate之后执行，即在configuration阶段gradle引擎将build.gradle从头到尾执行一遍之后，这时即是完成了evaluate，这时即会执行这个钩子函数
afterEvaluate {
    println("after evaluate")
}
task('first'){
    println("configuring")
    doLast {println("I'm first task")}
}
/*
10.times{i->
    task('task'+i){
        if (i%2==0){
            dependsOn('first')
        }
        def capturedI = i
        doLast {
            println("Executing task ${capturedI}")
        }
    }
}*/
